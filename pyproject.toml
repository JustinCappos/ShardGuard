[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "shardguard"
version = "0.1.0"
description = "Advanced prompt coordination and security framework for Large Language Models"
authors = [
    {name = "Rajath Reghunath", email = "rajathreghunath@gmail.com"}
]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "typer[all]>=0.16.0,<0.17.0",
    "rich>=14.0.0,<15.0.0",
    "httpx[http2]>=0.28.1,<0.29.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "loguru>=0.7.3,<0.8.0",
    "mcp>=1.0.0"
]

[project.scripts]
shardguard = "shardguard.cli:app"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.12.1",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "bandit[toml]>=1.7.5",
    "pydocstyle>=6.3.0"
]

# Minimal Poetry configuration (only what's absolutely required)
[tool.poetry]
packages = [{include = "shardguard", from = "src"}]

[tool.ruff]
target-version = "py312"  # Use py312 as latest supported for now
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "C901", # too-complex
    "T20", # flake8-print
    "TID252", # relative-imports
    "ERA", # eradicate
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "B904",  # raise-without-from-inside-except (allow for now)
    "B017",  # pytest.raises(Exception) (allow for tests)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20", "ARG", "PLR2004", "B017"]
"src/shardguard/cli.py" = ["PLC0415"]  # Allow conditional imports in CLI

[tool.ruff.lint.isort]
known-first-party = ["shardguard"]
split-on-trailing-comma = true
force-single-line = false

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.pydocstyle]
convention = "google"
inherit = false
match = "(?!test_).*\\.py"
match-dir = "(?!tests|migrations|__pycache__).*"
ignore = "D100,D104"  # Ignore missing docstrings in modules and packages for now
